---
title: "Misc"
author: "Jakub Nowosad"
format: html
---

```{r}
#| message: false
#| warning: false
spain = sf::read_sf("data/spain.gpkg")
covariates = terra::rast("data/predictors.tif")
temperature = sf::read_sf("data/temp_train.gpkg")

temperature = terra::extract(covariates, temperature, bind = TRUE) |> 
  sf::st_as_sf()
```

# RandomForestsGLS

```{r}
# library(RandomForestsGLS)
# ?RFGLS_estimate_spatial #(for estimation in spatial data)
# ?RFGLS_predict #(for prediction of mean function)
# ?RFGLS_predict_spatial #(for prediction of Spatial Response)
library(RandomForestsGLS)

coords = sf::st_coordinates(temperature)
temp_response = temperature$temp

temperature_df = sf::st_drop_geometry(temperature)
covariates = colnames(temperature_df)[2:(ncol(temperature_df) - 7)]
covariate_matrix = as.matrix(temperature_df[, covariates])

train_idx = 1:floor(nrow(coords) * 0.8)
test_idx = (floor(nrow(coords) * 0.8) + 1):nrow(coords)

estimation_result = RFGLS_estimate_spatial(
  coords = coords[train_idx, ],
  y = temp_response[train_idx],
  X = covariate_matrix[train_idx, ],
  ntree = 50
)

prediction_result = RFGLS_predict(
  RFGLS_out = estimation_result,
  Xtest = covariate_matrix[test_idx, ]
)

prediction_result_spatial = RFGLS_predict_spatial(
  RFGLS_out = estimation_result,
  coords.0 = coords[test_idx, ],
  Xtest = covariate_matrix[test_idx, ]
)

print(prediction_result)
```

# spatialRF

```{r}
library(spatialRF)
library(sf)

# Prepare spatialRF data
spatial_data = st_drop_geometry(temperature)
distance_matrix = as.matrix(dist(spatial_data[2:(ncol(spatial_data))]))
coordinates = st_coordinates(temperature)
spatial_data$x = coordinates[, 1]
spatial_data$y = coordinates[, 2]

dependent.variable.name = "temp"
predictor.variable.names = colnames(spatial_data)[2:(ncol(spatial_data) - 9)]

# hengl method
rf_spatial_hengl = rf_spatial(
  data = spatial_data,
  dependent.variable.name = dependent.variable.name,
  predictor.variable.names = predictor.variable.names,
  distance.matrix = distance_matrix,
  distance.thresholds = 0,
  method = "hengl",
  n.cores = 1
)
print(rf_spatial_hengl)

# mem.moran.sequential method
rf_spatial_moran = rf_spatial(
  data = spatial_data,
  dependent.variable.name = dependent.variable.name,
  predictor.variable.names = predictor.variable.names,
  distance.matrix = distance_matrix,
  distance.thresholds = 0,
  method = "mem.moran.sequential",
  n.cores = 1
)
print(rf_spatial_moran)

# Fit an rf model first
rf_model = rf(
  data = spatial_data,
  dependent.variable.name = dependent.variable.name,
  predictor.variable.names = predictor.variable.names,
  distance.matrix = distance_matrix,
  distance.thresholds = 0,
  n.cores = 1,
  verbose = FALSE
)

# Convert rf model to spatial model
rf_spatial_model = rf_spatial(model = rf_model)
```


# ENMeval

# sperrorest

# blockCV

# sits